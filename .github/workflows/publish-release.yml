name: Publish release

on:
  workflow_dispatch:

jobs:
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Set version env variable
        id: version-set
        run: |
          VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          RELEASE_VERSION=(${VERSION//-/ })
          RELEASE_VERSION=${RELEASE_VERSION[0]}
          mvn -s settings.xml versions:set -DnewVersion=$RELEASE_VERSION
          TAGGED_VERSION=$RELEASE_VERSION
          echo VERSION=$RELEASE_VERSION >> $GITHUB_ENV
          echo GIT_TAG=$TAGGED_VERSION >> $GITHUB_ENV
          echo "::set-output name=version::$RELEASE_VERSION"
          echo "::set-output name=taggedVersion::$TAGGED_VERSION"
      - name: Pre release depenency version update
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        run: |
          echo "Version: ${VERSION}"
          echo "Tagged Version: ${GIT_TAG}"
          mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec
          git config user.name ${{ secrets.BALLERINA_BOT_USERNAME }}
          git config user.email ${{ secrets.BALLERINA_BOT_EMAIL }}
          git checkout -b release-${GIT_TAG}
#      - name: Publish artifact
#        run: |
#          mvn --version
#          mvn -B -s $MAVEN_SETTINGS release:prepare release:perform -B -P wso2-release -DreleaseVersion=' + \
#          releaseVersion + ' -Dtag=' + releaseTag + ' -DdevelopmentVersion=' + nextDevVersion + '  -Dvscode.test.skip=true
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#          packageUser: ${{ secrets.BALLERINA_BOT_USERNAME }}
#          packagePAT: ${{ secrets.BALLERINA_BOT_TOKEN }}
#          devCentralToken: ${{ secrets.BALLERINA_DEV_CENTRAL_ACCESS_TOKEN }}
#
#      - name: Create release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          tag_name: "v${{ steps.version-set.outputs.taggedVersion }}"
#          release_name: ${{ steps.version-set.outputs.taggedVersion }}
#          draft: false
#          prerelease: true
#      - name: Upload zip artifacts
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_name: ballerina-${{ steps.version-set.outputs.longVersion }}.zip
#          asset_path: ballerina/build/distributions/ballerina-${{ steps.version-set.outputs.longVersion }}.zip
#          asset_content_type: application/octet-stream
